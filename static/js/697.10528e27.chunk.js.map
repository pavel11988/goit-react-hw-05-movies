{"version":3,"file":"static/js/697.10528e27.chunk.js","mappings":"6TAEMA,EAAW,+BACXC,EAAU,mCACVC,EAAQC,EAAQ,MAAtB,SAEeC,EAAe,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,kGAE2BH,EAAMI,IAAN,UAClBN,EADkB,iCACeC,EADf,kBACgCI,IAH3D,cAEUE,EAFV,OAMUC,EAAaD,EAASE,KAAKC,QAAQC,KAAI,SAAAC,GAC3C,IAAMC,EAAQD,EAAKE,YAAL,0CACyBF,EAAKE,aACxCC,EACJ,MAAO,CACLC,GAAIJ,EAAKI,GACTC,eAAgBL,EAAKM,MACrBL,MAAOA,MAbf,kBAiBWL,GAjBX,wJAuBeW,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,GAAjC,0GAE2BlB,EAAMI,IAAN,UAClBN,EADkB,kBACAoB,EADA,oBACkBnB,IAH7C,cAEUM,EAFV,SAK6CA,EAASE,KAA1CK,EALZ,EAKYA,YAAaI,EALzB,EAKyBA,MAAOG,EALhC,EAKgCA,SACtBR,EAAQC,EAAW,0CACcA,GACnCC,EARR,kBAUW,CAAEF,MAAAA,EAAOK,MAAAA,EAAOG,SAAAA,IAV3B,wJAgBeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+GAE2BpB,EAAMI,IAAN,UAClBN,EADkB,wCACsBC,IAHjD,cAEUM,EAFV,OAKUC,EAAaD,EAASE,KAAKC,QAAQC,KAAI,SAAAY,GAC3C,MAAO,CACLP,GAAIO,EAAMP,GACVC,eAAgBM,EAAMN,eACtBJ,MAAM,mCAAD,OAAqCU,EAAMT,iBATxD,kBAYWN,GAZX,wJAkBegB,EAAqB,GAArBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAoCJ,GAApC,kGAE2BlB,EAAMI,IAAN,UAClBN,EADkB,kBACAoB,EADA,4BAC0BnB,IAHrD,cAEUM,EAFV,OAKUkB,EAAYlB,EAASE,KAAKiB,KAAKf,KAAI,SAAAgB,GACvC,IAAMd,EAAQc,EAAMC,aAAN,0CACyBD,EAAMC,cACzCC,EACJ,MAAO,CACLb,GAAIW,EAAMX,GACVc,KAAMH,EAAMG,KACZC,MAAOlB,MAZf,kBAeWY,GAfX,wJAqBeO,EAAqB,GAArBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAoCZ,GAApC,kGAE2BlB,EAAMI,IAAN,UAClBN,EADkB,kBACAoB,EADA,4BAC0BnB,IAHrD,cAEUM,EAFV,OAKU0B,EAAc1B,EAASE,KAAKC,QAAQC,KAAI,SAAAuB,GAC5C,MAAO,CACLlB,GAAIkB,EAAOlB,GACXc,KAAMI,EAAOC,OACbC,KAAMF,EAAOG,YATrB,kBAYWJ,GAZX,iJ","sources":["services/movie-api.js"],"sourcesContent":["import imageDefault from '../images/default-image.jpg';\nimport avatarDefault from '../images/default-avatar.jpg';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '107e3d3f3084d30403596119046d7662';\nconst axios = require('axios');\n\nasync function getFilmByQuery(searchQuery) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n    );\n\n    const filmsArray = response.data.results.map(film => {\n      const image = film.poster_path\n        ? `https://image.tmdb.org/t/p/w300/${film.poster_path}`\n        : imageDefault;\n      return {\n        id: film.id,\n        original_title: film.title,\n        image: image,\n      };\n    });\n\n    return filmsArray;\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getInfoOfFilmById(filmId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`\n    );\n    const { poster_path, title, overview } = response.data;\n    const image = poster_path\n      ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n      : imageDefault;\n\n    return { image, title, overview };\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getTrendingOfWeek() {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`\n    );\n    const filmsArray = response.data.results.map(movie => {\n      return {\n        id: movie.id,\n        original_title: movie.original_title,\n        image: `https://image.tmdb.org/t/p/w300/${movie.poster_path}`,\n      };\n    });\n    return filmsArray;\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getCreditsOfFilmById(filmId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${filmId}/credits?api_key=${API_KEY}`\n    );\n    const castArray = response.data.cast.map(actor => {\n      const image = actor.profile_path\n        ? `https://image.tmdb.org/t/p/w300/${actor.profile_path}`\n        : avatarDefault;\n      return {\n        id: actor.id,\n        name: actor.name,\n        photo: image,\n      };\n    });\n    return castArray;\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getReviewsOfFilmById(filmId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${filmId}/reviews?api_key=${API_KEY}`\n    );\n    const reviewArray = response.data.results.map(review => {\n      return {\n        id: review.id,\n        name: review.author,\n        text: review.content,\n      };\n    });\n    return reviewArray;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport {\n  getFilmByQuery,\n  getTrendingOfWeek,\n  getInfoOfFilmById,\n  getCreditsOfFilmById,\n  getReviewsOfFilmById,\n};\n"],"names":["BASE_URL","API_KEY","axios","require","getFilmByQuery","searchQuery","get","response","filmsArray","data","results","map","film","image","poster_path","imageDefault","id","original_title","title","getInfoOfFilmById","filmId","overview","getTrendingOfWeek","movie","getCreditsOfFilmById","castArray","cast","actor","profile_path","avatarDefault","name","photo","getReviewsOfFilmById","reviewArray","review","author","text","content"],"sourceRoot":""}