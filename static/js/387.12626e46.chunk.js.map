{"version":3,"file":"static/js/387.12626e46.chunk.js","mappings":"4PAEaA,EAAcC,EAAAA,EAAAA,GAAH,6CAGXC,EAAcD,EAAAA,EAAAA,GAAH,iEAIXE,EAAaF,EAAAA,EAAAA,GAAH,+CAGVG,EAAaH,EAAAA,EAAAA,EAAH,8CAGVI,EAAYJ,EAAAA,EAAAA,GAAH,2F,SCJP,SAASK,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAqBR,GAClBS,MAAK,SAAAN,GAIJ,GAHuB,IAAnBA,EAAQO,QACVN,EAAWD,GAEU,IAAnBA,EAAQO,OACV,OAAOC,QAAQC,OAAO,IAAIC,MAAJ,iCAGzBC,OAAM,SAAAT,GACLC,EAASD,QAEZ,CAACL,IAECK,EAeDA,GACK,SAACP,EAAD,6CADT,GAbI,SAACL,EAAD,UACGU,EAAQY,KAAI,SAAAC,GACX,OACE,UAACrB,EAAD,YACE,UAACC,EAAD,WAAaoB,EAAOC,KAApB,QACA,SAACpB,EAAD,UAAamB,EAAOE,SAFJF,EAAOhB","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  list-style: none;\n`;\nexport const ReviewsItem = styled.li`\n  padding: 20px 40px;\n  width: 1000px;\n`;\nexport const ReviewName = styled.h3`\n  font-style: italic;\n`;\nexport const ReviewText = styled.p`\n  margin-left: 40px;\n`;\nexport const InfoTitle = styled.h3`\n  margin-top: 50px;\n  text-align: center;\n  font-style: italic;\n`;\n","import { getReviewsOfFilmById } from 'services/movie-api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewName,\n  ReviewText,\n  InfoTitle,\n} from './Reviews.styled';\n\nexport default function Reviews() {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getReviewsOfFilmById(id)\n      .then(reviews => {\n        if (reviews.length !== 0) {\n          setReviews(reviews);\n        }\n        if (reviews.length === 0) {\n          return Promise.reject(new Error(`There is no data to show.`));\n        }\n      })\n      .catch(error => {\n        setError(error);\n      });\n  }, [id]);\n\n  if (!error) {\n    return (\n      <ReviewsList>\n        {reviews.map(review => {\n          return (\n            <ReviewsItem key={review.id}>\n              <ReviewName>{review.name}:</ReviewName>\n              <ReviewText>{review.text}</ReviewText>\n            </ReviewsItem>\n          );\n        })}\n      </ReviewsList>\n    );\n  }\n\n  if (error) {\n    return <InfoTitle>There are no reviews yet.</InfoTitle>;\n  }\n}\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewName","ReviewText","InfoTitle","Reviews","id","useParams","useState","reviews","setReviews","error","setError","useEffect","getReviewsOfFilmById","then","length","Promise","reject","Error","catch","map","review","name","text"],"sourceRoot":""}