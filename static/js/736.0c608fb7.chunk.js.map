{"version":3,"file":"static/js/736.0c608fb7.chunk.js","mappings":"4PAEaA,EAAYC,EAAAA,EAAAA,GAAH,gKASTC,EAAYD,EAAAA,EAAAA,GAAH,mKASTE,EAAaF,EAAAA,EAAAA,IAAH,yGAMVG,EAAYH,EAAAA,EAAAA,GAAH,+CAITI,EAAYJ,EAAAA,EAAAA,GAAH,2F,SCpBP,SAASK,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAsCA,OApCAC,EAAAA,EAAAA,YAAU,WACRD,EAAS,OACTE,EAAAA,EAAAA,IAAqBR,GAClBS,MAAK,SAAAN,GAIJ,GAHuB,IAAnBA,EAAQO,QACVN,EAAWD,GAEU,IAAnBA,EAAQO,OACV,OAAOC,QAAQC,OAAO,IAAIC,MAAJ,iCAGzBC,OAAM,SAAAT,GACLC,EAASD,QAEZ,CAACL,KAuBF,8BACIK,GAeA,SAACP,EAAD,2CAdA,SAACL,EAAD,UACGU,EAAQY,KAAI,SAAAC,GACX,OACE,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,IAAKD,EAAME,MACXC,IAAG,uBAAkBH,EAAMI,SAE7B,SAACvB,EAAD,UAAYmB,EAAMI,SALJJ,EAAMhB","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding-left: 300px;\n  padding-right: 300px;\n  margin-top: 50px;\n`;\n\nexport const CastsItem = styled.li`\n  list-style: none;\n  width: 250px;\n  height: 430px;\n  &:not(:nth-of-type(4n)) {\n    margin-right: 25px;\n  }\n  margin-bottom: 20px;\n`;\nexport const ActorPhoto = styled.img`\n  width: 250px;\n  height: 375px;\n  object-fit: cover;\n  border-radius: 10px;\n`;\nexport const ActorName = styled.h3`\n  text-align: center;\n`;\n\nexport const InfoTitle = styled.h3`\n  margin-top: 50px;\n  text-align: center;\n  font-style: italic;\n`;\n","import { getCreditsOfFilmById } from 'services/movie-api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastsList,\n  CastsItem,\n  ActorPhoto,\n  ActorName,\n  InfoTitle,\n} from './Cast.styled';\nexport default function Cast() {\n  const { id } = useParams();\n  const [credits, setCredits] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setError(null);\n    getCreditsOfFilmById(id)\n      .then(credits => {\n        if (credits.length !== 0) {\n          setCredits(credits);\n        }\n        if (credits.length === 0) {\n          return Promise.reject(new Error(`There is no data to show.`));\n        }\n      })\n      .catch(error => {\n        setError(error);\n      });\n  }, [id]);\n\n  // if (!error) {\n  //   return (\n  //     <CastsList>\n  //       {credits.map(actor => {\n  //         return (\n  //           <CastsItem key={actor.id}>\n  //             <ActorPhoto\n  //               src={actor.photo}\n  //               alt={`profilephoto-${actor.name}`}\n  //             ></ActorPhoto>\n  //             <ActorName>{actor.name}</ActorName>\n  //           </CastsItem>\n  //         );\n  //       })}\n  //     </CastsList>\n  //   );\n  // }\n  // if (error) {\n  //   return <InfoTitle>There are no casts to show.</InfoTitle>;\n  // }\n  return (\n    <>\n      {!error ? (\n        <CastsList>\n          {credits.map(actor => {\n            return (\n              <CastsItem key={actor.id}>\n                <ActorPhoto\n                  src={actor.photo}\n                  alt={`profilephoto-${actor.name}`}\n                ></ActorPhoto>\n                <ActorName>{actor.name}</ActorName>\n              </CastsItem>\n            );\n          })}\n        </CastsList>\n      ) : (\n        <InfoTitle>There are no casts to show.</InfoTitle>\n      )}\n    </>\n  );\n}\n"],"names":["CastsList","styled","CastsItem","ActorPhoto","ActorName","InfoTitle","Cast","id","useParams","useState","credits","setCredits","error","setError","useEffect","getCreditsOfFilmById","then","length","Promise","reject","Error","catch","map","actor","src","photo","alt","name"],"sourceRoot":""}